{"remainingRequest":"/home/user21/front/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user21/front/frontend/src/components/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/user21/front/frontend/src/components/Login.vue","mtime":1557469764025},{"path":"/home/user21/front/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user21/front/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/user21/front/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user21/front/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  },\r\n  methods: {\r\n    authenticate () {\r\n      const payload = {\r\n        username: this.username,\r\n        password: this.password\r\n      }\r\n      axios.post(this.$store.state.endpoints.obtainJWT, payload)\r\n        .then((response) => {\r\n          this.$store.commit('updateToken', response.data.token)\r\n          // get and set auth user\r\n          const base = {\r\n            baseURL: this.$store.state.endpoints.baseUrl,\r\n            headers: {\r\n            // Set your Authorization to 'JWT', not Bearer!!!\r\n              Authorization: `JWT ${this.$store.state.jwt}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            xhrFields: {\r\n                withCredentials: true\r\n            }\r\n          }\r\n          // Even though the authentication returned a user object that can be\r\n          // decoded, we fetch it again. This way we aren't super dependant on\r\n          // JWT and can plug in something else.\r\n          const axiosInstance = axios.create(base)\r\n          axiosInstance({\r\n            url: \"/user/\",\r\n            method: \"get\",\r\n            params: {}\r\n          })\r\n            .then((response) => {\r\n              this.$store.commit(\"setAuthUser\",\r\n                {authUser: response.data, isAuthenticated: true}\r\n              )\r\n              this.$router.push({name: 'Home'})\r\n            })\r\n\r\n        })\r\n        \r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.debug(error);\r\n          console.dir(error);\r\n        })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\r\n  <form class=\"login form\">\r\n    <div class=\"field\">\r\n      <label for=\"id_username\">Username</label>\r\n      <input\r\n        v-model=\"username\"\r\n        type=\"text\"\r\n        placeholder=\"Username\"\r\n        autofocus=\"autofocus\"\r\n        maxlength=\"150\"\r\n        id=\"id_username\">\r\n    </div>\r\n    <div class=\"field\">\r\n      <label for=\"id_password\">Password</label>\r\n      <input\r\n        v-model=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        id=\"id_password\">\r\n    </div>\r\n    <button\r\n      @click.prevent=\"authenticate\"\r\n      class=\"button primary\"\r\n      type=\"submit\">\r\n      Log In\r\n    </button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  },\r\n  methods: {\r\n    authenticate () {\r\n      const payload = {\r\n        username: this.username,\r\n        password: this.password\r\n      }\r\n      axios.post(this.$store.state.endpoints.obtainJWT, payload)\r\n        .then((response) => {\r\n          this.$store.commit('updateToken', response.data.token)\r\n          // get and set auth user\r\n          const base = {\r\n            baseURL: this.$store.state.endpoints.baseUrl,\r\n            headers: {\r\n            // Set your Authorization to 'JWT', not Bearer!!!\r\n              Authorization: `JWT ${this.$store.state.jwt}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            xhrFields: {\r\n                withCredentials: true\r\n            }\r\n          }\r\n          // Even though the authentication returned a user object that can be\r\n          // decoded, we fetch it again. This way we aren't super dependant on\r\n          // JWT and can plug in something else.\r\n          const axiosInstance = axios.create(base)\r\n          axiosInstance({\r\n            url: \"/user/\",\r\n            method: \"get\",\r\n            params: {}\r\n          })\r\n            .then((response) => {\r\n              this.$store.commit(\"setAuthUser\",\r\n                {authUser: response.data, isAuthenticated: true}\r\n              )\r\n              this.$router.push({name: 'Home'})\r\n            })\r\n\r\n        })\r\n        \r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.debug(error);\r\n          console.dir(error);\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\">\r\n</style>"]}]}