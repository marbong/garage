{"remainingRequest":"/home/user21/front/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user21/front/frontend/src/views/Amenity.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/user21/front/frontend/src/views/Amenity.vue","mtime":1557469764029},{"path":"/home/user21/front/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user21/front/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/user21/front/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user21/front/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\"\n\nexport default {\n  data: () => ({\n    drawer: false,\n    dialog: false,\n    learned: false,   \n    amenity: 'towel', \n    amenities: ['towel', 'water', 'slipper'],\n    count: 4, \n    counts: [1,2,3,4,5,6,7,8,9,10],\n    trans_datas: [] \n  }),\n\n  methods: {\n    order_amenity: function ()  {\n      let self = this\n      self.trans_datas = []\n      var form_data = new FormData();\n      form_data.append('sentence', self.sentence); \n      form_data.set('trans_mode', self.trans_mode);\n      form_data.set('pure_mode', self.pure_mode);\n      form_data.set('count', self.count);\n\n      axios({\n        method: 'post',\n        url: '/trans/trans/',\n        data: form_data,\n        config: { headers: {'Content-Type': 'multipart/form-data' }}\n      })\n      .then(response => {\n        var trans = response[\"data\"][\"output\"]; \n        for(var index in trans) { \n          var attr = trans[index];\n          var data =  attr[\"result\"]\n          console.log(attr[\"probs\"])\n          console.log(data)\n          self.trans_datas.push({ text: attr[\"result\"], probs: attr[\"probs\"]  })\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      }); \n    },\n    change_trans_modes(data) {\n      this.trans_mode = data;\n    },\n    change_pure_modes(data) {\n      this.pure_mode = data;\n    },\n    change_counts(data) {\n      this.count = data;\n    },\n    reset: function ()  {\n      this.sentence = '';\n      this.trans_datas = [];\n    } \n  }\n}\n",{"version":3,"sources":["Amenity.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Amenity.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container fill-height fluid grid-list-xl text-xs-center>\n    <v-layout justify-center wrap>\n\n      <v-flex xs12 md8>\n        <v-card >\n          <v-flex d-flex>\n            <v-select v-model=\"amenity\" :items=\"amenities\" menu-props=\"auto\" prepend-icon=\"domain\" \n            label=\"Select Amenity\" @change=\"change_amenities\"></v-select>\n            <v-select v-model=\"count\" :items=\"counts\"  menu-props=\"auto\" prepend-icon=\"domain\" \n            label=\"Select count\" @change=\"change_counts\"></v-select>   \n          </v-flex>      \n        </v-card>\n      </v-flex>\n      \n      <v-flex xs12 md8>\n        <v-btn block dark large color=\"info\" class=\"subheading\" \n          @click=\"order_amenity\" >Order Amenity\n        </v-btn>          \n      </v-flex>\n\n      <v-flex xs12 md8 v-for=\"trans in trans_datas\" :key=\"trans.text\">\n        <v-divider></v-divider>  \n        <h1 class=\"display-1 text-xs-center font-weight-light light-blue--text\">\n          {{ trans.text }}\n        </h1>\n      </v-flex>  \n\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios'\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\"\n\nexport default {\n  data: () => ({\n    drawer: false,\n    dialog: false,\n    learned: false,   \n    amenity: 'towel', \n    amenities: ['towel', 'water', 'slipper'],\n    count: 4, \n    counts: [1,2,3,4,5,6,7,8,9,10],\n    trans_datas: [] \n  }),\n\n  methods: {\n    order_amenity: function ()  {\n      let self = this\n      self.trans_datas = []\n      var form_data = new FormData();\n      form_data.append('sentence', self.sentence); \n      form_data.set('trans_mode', self.trans_mode);\n      form_data.set('pure_mode', self.pure_mode);\n      form_data.set('count', self.count);\n\n      axios({\n        method: 'post',\n        url: '/trans/trans/',\n        data: form_data,\n        config: { headers: {'Content-Type': 'multipart/form-data' }}\n      })\n      .then(response => {\n        var trans = response[\"data\"][\"output\"]; \n        for(var index in trans) { \n          var attr = trans[index];\n          var data =  attr[\"result\"]\n          console.log(attr[\"probs\"])\n          console.log(data)\n          self.trans_datas.push({ text: attr[\"result\"], probs: attr[\"probs\"]  })\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      }); \n    },\n    change_trans_modes(data) {\n      this.trans_mode = data;\n    },\n    change_pure_modes(data) {\n      this.pure_mode = data;\n    },\n    change_counts(data) {\n      this.count = data;\n    },\n    reset: function ()  {\n      this.sentence = '';\n      this.trans_datas = [];\n    } \n  }\n}\n</script>"]}]}